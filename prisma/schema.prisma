generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prize {
  id             String    @id @default(cuid())
  key            String    @unique
  label          String
  color          String?
  description    String?
  stock          Int?
  active         Boolean   @default(true)
  emittedTotal   Int       @default(0)
  lastEmittedAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  assignedTokens Token[]   @relation("AssignedPrize")
  tokens         Token[]
}

model Batch {
  id               String            @id @default(cuid())
  description      String?
  createdBy        String?
  createdAt        DateTime          @default(now())
  functionalDate   DateTime?
  staticTargetUrl  String?           // If present, this batch is a static redirect batch
  rouletteSessions RouletteSession[]
  tokens           Token[]

  @@index([functionalDate])
  @@index([staticTargetUrl])
}

model Token {
  id                String    @id @default(cuid())
  prizeId           String
  batchId           String
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
  redeemedAt        DateTime?
  signature         String
  signatureVersion  Int       @default(1)
  disabled          Boolean   @default(false)
  revealedAt        DateTime?
  assignedPrizeId   String?
  deliveredAt       DateTime?
  deliveredByUserId String?
  deliveryNote      String?
  ingestedAt        DateTime  @default(now())
  validFrom         DateTime?
  // Pre-linked next token for "retry" control (optional, for printing determinism)
  pairedNextTokenId String?
  assignedPrize     Prize?    @relation("AssignedPrize", fields: [assignedPrizeId], references: [id])
  batch             Batch     @relation(fields: [batchId], references: [id])
  prize             Prize     @relation(fields: [prizeId], references: [id])

  @@index([prizeId])
  @@index([batchId])
  @@index([expiresAt])
  @@index([redeemedAt])
  @@index([revealedAt])
  @@index([deliveredAt])
  @@index([batchId, deliveredAt])
  @@index([ingestedAt])
  @@index([validFrom])
  @@index([pairedNextTokenId])
  @@index([batchId, revealedAt, redeemedAt, disabled, expiresAt])
}

model SystemConfig {
  id            Int      @id @default(autoincrement())
  tokensEnabled Boolean  @default(true)
  updatedAt     DateTime @updatedAt
}

model EventLog {
  id        String   @id @default(cuid())
  type      String
  message   String?
  metadata  String?
  createdAt DateTime @default(now())
}

model PrintTemplate {
  id        String   @id @default(cuid())
  name      String
  filePath  String
  meta      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model RouletteSession {
  id           String         @id @default(cuid())
  batchId      String
  mode         String         @default("BY_PRIZE")
  status       String         @default("ACTIVE")
  spins        Int            @default(0)
  maxSpins     Int?
  createdAt    DateTime       @default(now())
  finishedAt   DateTime?
  meta         String
  batch        Batch          @relation(fields: [batchId], references: [id])
  spinsHistory RouletteSpin[]

  @@index([batchId])
  @@index([status])
}

model RouletteSpin {
  id             String          @id @default(cuid())
  sessionId      String
  prizeId        String
  tokenId        String?
  weightSnapshot Int
  order          Int
  createdAt      DateTime        @default(now())
  session        RouletteSession @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, order])
  @@index([sessionId])
  @@index([prizeId])
}

model Person {
  id               String             @id @default(cuid())
  code             String             @unique
  name             String
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  dni              String?            @unique
  area             String?
  jobTitle         String?
  whatsapp         String?
  birthday         DateTime?          @db.Timestamp(6)
  PersonTaskStatus PersonTaskStatus[]
  scans            Scan[]
  user             User?

  @@index([code])
}

model Scan {
  id          String   @id @default(cuid())
  personId    String
  scannedAt   DateTime @default(now())
  type        String   @default("IN")
  deviceId    String?
  byUser      String?
  meta        String?
  createdAt   DateTime @default(now())
  businessDay String
  person      Person   @relation(fields: [personId], references: [id])

  @@index([personId])
  @@index([scannedAt])
  @@index([businessDay])
  @@index([businessDay, personId, type])
  @@index([personId, businessDay])
}

model User {
  id                        String                 @id @default(cuid())
  username                  String                 @unique
  passwordHash              String
  role                      String                 @default("COLLAB")
  personId                  String                 @unique
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  commitmentVersionAccepted Int                    @default(0)
  commitmentAcceptedAt      DateTime?              @db.Timestamp(6)
  ChecklistComment          ChecklistComment[]
  ChecklistTaskComment      ChecklistTaskComment[]
  passwordResetOtps         PasswordResetOtp[]
  updatedTaskStatuses       PersonTaskStatus[]     @relation("TaskStatusUpdatedBy")
  TaskComment               TaskComment[]
  person                    Person                 @relation(fields: [personId], references: [id])

  @@index([commitmentVersionAccepted], map: "idx_user_commitment_version")
}

model Task {
  id             String             @id @default(cuid())
  label          String
  active         Boolean            @default(true)
  sortOrder      Int                @default(0)
  priority       Int                @default(0)
  completed      Boolean            @default(false)
  measureEnabled Boolean            @default(false)
  targetValue    Int?
  unitLabel      String?
  startDay       String?
  endDay         String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  area           String?
  statuses       PersonTaskStatus[]
  TaskComment    TaskComment[]

  @@index([area])
}

model PersonTaskStatus {
  id           String   @id @default(cuid())
  personId     String
  taskId       String
  day          String
  done         Boolean  @default(false)
  measureValue Int      @default(0)
  updatedBy    String?
  updatedAt    DateTime @updatedAt
  person       Person   @relation(fields: [personId], references: [id])
  task         Task     @relation(fields: [taskId], references: [id])
  user         User?    @relation("TaskStatusUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([personId, taskId, day])
  @@index([personId])
  @@index([taskId])
  @@index([day])
}

model BirthdayPack {
  id           String                @id @default(cuid())
  name         String                @unique
  qrCount      Int
  bottle       String
  perks        String
  active       Boolean               @default(true)
  featured     Boolean               @default(false)
  priceSoles   Int                   @default(0) // Precio entero en soles (sin decimales)
  isCustom     Boolean               @default(false) // Pack placeholder / personalizado interno
  reservations BirthdayReservation[]

  @@index([active])
  @@index([featured])
}

model BirthdayReservation {
  id                String             @id @default(cuid())
  celebrantName     String
  phone             String
  documento         String
  email             String?
  date              DateTime
  timeSlot          String
  packId            String
  guestsPlanned     Int
  status            String             @default("draft")
  tokensGeneratedAt DateTime?
  createdBy         String?
  updatedBy         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  hostArrivedAt     DateTime?          @db.Timestamp(6)
  guestArrivals     Int                @default(0)
  referrerId        String?
  pack              BirthdayPack       @relation(fields: [packId], references: [id])
  referrer          BirthdayReferrer?  @relation(fields: [referrerId], references: [id])
  courtesyItems     CourtesyItem[]
  inviteTokens      InviteToken[]
  photoDeliveries   PhotoDeliverable[]
  redemptions       TokenRedemption[]

  @@index([packId])
  @@index([date, timeSlot])
  @@index([status])
  @@index([hostArrivedAt])
  @@index([referrerId])
}

model BirthdayReferrer {
  id            String                @id @default(cuid())
  name          String                // Nombre del colaborador
  slug          String                @unique // Slug personalizado para URLs (ej: ana-garcia)
  code          String                @unique // Código generado único
  email         String?
  phone         String?
  active        Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  reservations  BirthdayReservation[]

  @@index([slug])
  @@index([active])
}

model InviteToken {
  id            String              @id @default(cuid())
  reservationId String
  code          String              @unique
  kind          String              @default("guest")
  status        String              @default("unclaimed")
  expiresAt     DateTime
  claim         String
  metadata      String?
  usedCount     Int                 @default(0)
  maxUses       Int?
  createdAt     DateTime            @default(now())
  reservation   BirthdayReservation @relation(fields: [reservationId], references: [id])
  redemptions   TokenRedemption[]
  card          InviteTokenCard?

  @@index([reservationId])
  @@index([status])
  @@index([expiresAt])
}

model InviteTokenCard {
  id            String      @id @default(cuid())
  inviteTokenId String      @unique
  kind          String
  filePath      String      // relative to public/ (e.g. birthday-cards/<reservationId>/host.png)
  createdAt     DateTime    @default(now())
  inviteToken   InviteToken @relation(fields: [inviteTokenId], references: [id], onDelete: Cascade)

  @@index([kind])
  @@index([createdAt])
}

model TokenRedemption {
  id            String               @id @default(cuid())
  tokenId       String
  redeemedAt    DateTime             @default(now())
  by            String?
  device        String?
  location      String?
  reservationId String?
  reservation   BirthdayReservation? @relation(fields: [reservationId], references: [id])
  token         InviteToken          @relation(fields: [tokenId], references: [id])

  @@index([tokenId])
  @@index([redeemedAt])
  @@index([reservationId])
}

model CourtesyItem {
  id            String              @id @default(cuid())
  reservationId String
  type          String
  status        String              @default("pending")
  notes         String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  reservation   BirthdayReservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
  @@index([type])
  @@index([status])
}

model PhotoDeliverable {
  id            String              @id @default(cuid())
  reservationId String
  kind          String              @default("group")
  url           String?
  status        String              @default("pending")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  reservation   BirthdayReservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
  @@index([status])
}

model PasswordResetOtp {
  id        String    @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([code])
  @@index([expiresAt])
}

model DayBrief {
  id        String   @id @default(cuid())
  day       String   @unique
  title     String?
  show      String?
  promos    String?
  notes     String?
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([day])
}

model Show {
  id                String     @id @default(cuid())
  title             String     @db.VarChar(120)
  slug              String     @unique @db.VarChar(140)
  status            ShowStatus @default(DRAFT)
  startsAt          DateTime
  endsAt            DateTime?
  slot              Int?       @db.SmallInt
  imageOriginalPath String
  imageWebpPath     String
  imageBlurData     String
  width             Int
  height            Int
  bytesOriginal     Int
  bytesOptimized    Int
  publishedAt       DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  details           String?
  notes             String?
  specialGuests     String?

  @@index([status, startsAt(sort: Desc)])
}

model ChecklistComment {
  id        String   @id
  userId    String
  day       String
  text      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([day])
  @@index([userId])
}

model ChecklistTaskComment {
  id        String   @id
  userId    String
  taskId    String
  day       String
  text      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([day])
  @@index([taskId], map: "ChecklistTaskComment_task_idx")
  @@index([userId])
}

model TaskComment {
  id        String   @id
  userId    String
  taskId    String
  day       String
  text      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([day])
  @@index([taskId, day])
  @@index([userId])
}

model birthdaypack {
  id       String  @id
  name     String? @unique
  qrcount  Int
  bottle   String
  perks    String
  active   Int     @default(1)
  featured Int     @default(0)
}

enum ShowStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ===== SISTEMA DE CARTA DIGITAL =====

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  icon        String?   // emoji o icon name
  order       Int       @default(0)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([order])
  @@index([active])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  available   Boolean   @default(true)
  featured    Boolean   @default(false)
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]

  @@index([categoryId])
  @@index([available])
  @@index([featured])
  @@index([order])
}

model Table {
  id        String   @id @default(cuid())
  number    Int      @unique
  name      String?  // ej: "Terraza 01", "VIP 05"
  zone      String?  // ej: "Terraza", "VIP", "Barra"
  capacity  Int      @default(4)
  active    Boolean  @default(true)
  qrCode    String?  @unique // URL del QR
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@index([zone])
  @@index([active])
}

enum StaffRole {
  WAITER    // Mozo
  CASHIER   // Caja
  ADMIN     // Administrador
  BARTENDER // Bartender
}

model Staff {
  id        String     @id @default(cuid())
  userId    String     @unique
  name      String
  role      StaffRole
  active    Boolean    @default(true)
  zones     String[]   // zonas asignadas: ["Terraza", "VIP"]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  orders    Order[]

  @@index([role])
  @@index([active])
}

enum OrderStatus {
  PENDING     // Pendiente
  CONFIRMED   // Confirmado por mozo
  PREPARING   // En preparación
  READY       // Listo para servir
  DELIVERED   // Entregado
  CANCELLED   // Cancelado
}

model Order {
  id          String      @id @default(cuid())
  tableId     String
  table       Table       @relation(fields: [tableId], references: [id])
  staffId     String?     // mozo asignado
  staff       Staff?      @relation(fields: [staffId], references: [id])
  status      OrderStatus @default(PENDING)
  total       Float       @default(0)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  confirmedAt DateTime?
  readyAt     DateTime?
  deliveredAt DateTime?
  items       OrderItem[]

  @@index([tableId])
  @@index([staffId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  price     Float    // precio al momento del pedido
  notes     String?
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}

enum NotificationType {
  ORDER_NEW        // Nuevo pedido
  ORDER_CONFIRMED  // Pedido confirmado
  ORDER_READY      // Pedido listo
  ORDER_DELIVERED  // Pedido entregado
  ORDER_CANCELLED  // Pedido cancelado
  STAFF_ALERT      // Alerta a staff
  SYSTEM_MESSAGE   // Mensaje del sistema
}

model Notification {
  id        String            @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  recipient String?           // userId del destinatario (null = broadcast)
  sender    String?           // userId del remitente
  orderId   String?           // referencia a pedido si aplica
  read      Boolean           @default(false)
  readAt    DateTime?
  createdAt DateTime          @default(now())

  @@index([recipient])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}
